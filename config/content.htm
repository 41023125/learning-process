<h1>About</h1>
<p>這裡將放置學習python的所有過程</p>
<p>以便將來回憶與查詢</p>
<p>網站網址:<a href="https://41023125.github.io/learning-process/">https://41023125.github.io/learning-process/</a></p>
<p></p>
<h1>web page</h1>
<p><span>這裡放置</span>所學編寫網頁之知識</p>
<p></p>
<h2>模板</h2>
<p>所使用模板</p>
<p><a href="/downloads/cmsimde.zip">cmsimde.zip</a></p>
<h1>OpenCV</h1>
<p>使用python進行圖片處理</p>
<h2>處理與比較</h2>
<div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import cv2
import numpy as np

jpg1 = r"C:\initpython\ph\Screenshot_20230406-192510.jpg"
image = cv2.imread(jpg1)


# 裁剪
def pag(image, start_x, start_y):
    end_x = 95
    end_y = 95
    return image[start_y:start_y+end_y, start_x:start_x+end_x]


# 比較
def mse(image1, image2):
    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)
    err /= float(image1.shape[0] * image1.shape[1])
    if err == 0:
        return 100.0
    else:
        psnr = 10 * np.log10(255**2 / err)
        similarity = (psnr / 50) * 100
        return similarity


image1 = pag(image, 195, 1090)
image2 = cv2.imread(r"C:\initpython\ph\jpg\phcropped_image.png")


# 顯示圖片
'''
cv2.imshow("Cropped Image", image2)
cv2.waitKey(0)
cv2.destroyAllWindows()
'''

# 儲存
# cv2.imwrite("phcropped_image.png", image1)
print("相似度: ", mse(image1, image2))
</pre>
</div>
</div>
<h2>辨識初步程式架構</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import os
import cv2
import numpy as np

jpg1 = r"C:\Users\alin\Nox_share\ImageShare\Screenshots\Screenshot_20230406-230719.png"
image = cv2.imread(jpg1)


# 裁剪
def pag(image, start_x, start_y):
    end_x = 95
    end_y = 95
    return image[start_y:start_y+end_y, start_x:start_x+end_x]


# 比較
def mse(image1, image2):
    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)
    err /= float(image1.shape[0] * image1.shape[1])
    if err == 0:
        return 100.0
    else:
        psnr = 10 * np.log10(255**2 / err)
        similarity = (psnr / 50) * 100
        return similarity


# 查詢類別
def read_file(num):
    mapping = {}
    with open("ph\\dictionary.txt", 'r', encoding='utf-8') as f:
        # 读取文件内容
        lines = f.readlines()
        for line in lines:
            parts = line.split()
            if len(parts) == 2:
                key = int(parts[0])
                value = parts[1]
                mapping[key] = value
    if num in mapping:
        print(mapping[num])
    else:
        print('設置出現錯誤')


# 檢查圖庫數量
def count_files():
    folder_path = "ph\\jpg"
    files = os.listdir(folder_path)
    return len(files)


image1 = pag(image, 195, 1090)
# image2 = cv2.imread(r"C:\initpython\ph\jpg\5.png")


# 顯示圖片
'''
cv2.imshow("Cropped Image", image1)
cv2.waitKey(0)
cv2.destroyAllWindows()
'''

# 儲存
# cv2.imwrite("phcropped_image.png", image1)

mes = 0
ass = 0
for i in range(1, count_files()+1):
    image2 = cv2.imread("ph\\jpg\\" + str(i) + ".png")
    print("相似度: ", mse(image1, image2), "%")
    if mes &lt; mse(image1, image2):
        mes = mse(image1, image2)
        ass = i
    if mes &lt; 10:
        ass = 999
read_file(ass)
cv2.imshow("Cropped Image", image1)
cv2.waitKey(0)
cv2.destroyAllWindows()
</pre>
<p></p><h1>adb</h1>
<p><a href="https://drive.google.com/file/d/1Jz0SCrmmJfHok8FH_F0pwIMWqxyfNwms/view?usp=share_link/"></a></p>
<p>學習利用python控制手機與模擬器</p>
<p><a href="https://hi-upchen.medium.com/%E5%A6%82%E4%BD%95%E5%9C%A8-win10-%E5%AE%89%E8%A3%9D-android-adb%E5%B7%A5%E5%85%B7-8546cb0b81ce">如何在 WIN10 安裝 Android ADB工具</a></p>
<p><a href="https://hi-upchen.medium.com/%E5%A6%82%E4%BD%95%E8%AE%93-nox-%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%93%AC%E5%99%A8%E6%94%AF%E6%8F%B4-adb-3b10b2764967">如何讓 NOX 夜神模擬器支援 ADB</a></p>
<p><a href="https://shengyu7697.github.io/android-adb/">Android adb 基本用法教學</a></p>
<p><a href="https://www.yeshen.com/faqs/H15tDZ6YW">【新手指导】夜神安卓模拟器adb命令详解_夜神安卓模拟器新手帮助页 (yeshen.com)</a></p>
<p><span>可以使用</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">adb shell pm list packages | findstr dice
</pre>
<p><span><br/></span><span>指令來查看當前顯示的應用程式的相關資訊，其中 mCurrentFocus 顯示目前的視窗和活動的應用程式包名和類名，mFocusedApp 顯示當前焦點的應用程式包名和進程 ID。可以在模擬器或設備上執行此指令，以獲得目標應用程式的包名和主活動。</span></p>
<p><span>假設輸出了package:com.percent.royaldice</span></p>
<p><span>可以使用</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">adb shell monkey -p com.percent.royaldice -c android.intent.category.LAUNCHER 1</pre>
<p><span><br/><br/></span></p>
<p><span>打開程式</span></p>
<p>使用</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">adb shell am force-stop com.percent.royaldice</pre>
<p><br/><br/></p>
<p>關閉程式</p>
<p><span></span></p>
<h2>列出設備上的應用程式</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from ppadb.client import Client
 
# 建立 ADB 連線
adb = Client(host='127.0.0.1', port=5037)
device = adb.device('127.0.0.1:62001')
 
# 取得所有已安裝應用程式列表
result = device.shell('pm list packages')
packages = [line.strip()[8:] for line in result.split('\n') if line.strip()]
 
# 列出所有應用程式名稱
for package in packages:
    print(package)</pre>
<h2>測試端口是否正常連接</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import socket

# 設置主機地址和端口號
host = '127.0.0.1'
port = 62001

# 創建套接字對象
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# 嘗試連接主機和端口號
result = sock.connect_ex((host, port))

# 檢查連接結果
if result == 0:
print("端口連接成功！")
else:
print("端口連接失敗。")

# 關閉套接字對象
sock.close()</pre>
<p><br/><br/></p>
<h2>取得目前應用程式的包名稱和主活動</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from ppadb.client import Client

# 建立 ADB 連線
adb = Client(host='127.0.0.1', port=5037)
device = adb.device('127.0.0.1:62001')

# 查詢目前應用程式的包名稱和主活動
output = device.shell('dumpsys window windows | grep -E "mCurrentFocus"')
package_activity = output.split(' ')[-1].split('/')
package_name = package_activity[0]
activity_name = package_activity[1].strip()

# 開啟應用程式
#device.shell(f"am start -n {package_name}/{activity_name}")</pre>
<p><br/>輸出結果範例:</p>
<p>com.percent.royaldice<br/>com.google.firebase.MessagingUnityPlayerActivity}</p>
<p>分別帶入後變成</p>
<div>
<div><span>package_name</span><span> = </span><span>'com.percent.royaldice'</span></div>
<div><span>activity_name</span><span> = </span><span>'com.google.firebase.MessagingUnityPlayerActivity'</span></div>
<div>便能利用
<div>
<div><span>device</span><span>.shell(</span><span>f</span><span>"am start -n </span><span>{</span><span>package_name</span><span>}</span><span>/</span><span>{</span><span>activity_name</span><span>}</span><span>"</span><span>)</span></div>
<div><span>開啟想要開啟的程式</span></div>
</div>
</div>
</div>
<p><br/><br/></p>
<h2>截圖</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import subprocess

subprocess.run("adb shell screencap -p /sdcard/screenshot.png")
subprocess.run("adb pull /sdcard/screenshot.png .")
subprocess.run("adb shell rm /sdcard/screenshot.png")</pre>
<p></p>
<h2>點擊</h2>
<div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import subprocess


def click(x, y):
    subprocess.run(['adb', 'shell', f'input tap {x} {y}'])


click(500, 500)  # 點擊座標 (500, 500)
</pre>
</div>
</div>
<h1>tel2023</h1>
<p>labview程式:</p>
<p><a href="https://drive.google.com/file/d/1jeEyfaqDKvxz0uE1AdAojRzPLV_Hj38D/view?usp=share_link/">https://drive.google.com/file/d/1jeEyfaqDKvxz0uE1AdAojRzPLV_Hj38D/view?usp=share_link/</a></p>
<h2>直線校正</h2>
<p><a href="https://drive.google.com/file/d/1Jz0SCrmmJfHok8FH_F0pwIMWqxyfNwms/view?usp=share_link/">直線校正.zip</a></p>
<p><span></span></p>
<p>使用python編寫</p>
<p>下方為程式碼</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import tkinter as tk


class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.input2_label = tk.Label(self, text="實際距離:")
        self.input2_label.pack()
        self.input2 = tk.Entry(self)
        self.input2.pack()

        self.input3_label = tk.Label(self, text="當前輪徑:")
        self.input3_label.pack()
        self.input3 = tk.Entry(self)
        self.input3.pack()

        self.submit_button = tk.Button(
            self, text="計算", command=self.show_output)
        self.submit_button.pack()

        self.output_label = tk.Label(self, text="輪徑:")
        self.output_label.pack()
        self.output = tk.Label(self, text="")
        self.output.pack()

        self.quit_button = tk.Button(
            self, text="Quit", command=self.master.quit)
        self.quit_button.pack()

    def show_output(self):
        input2_value = self.input2.get()
        input3_value = self.input3.get()

        # 在這裡加上你的處理邏輯，將結果顯示在output的Label中
        input2_value = float(self.input2.get())
        input3_value = float(self.input3.get())
        output_value = (input3_value * input2_value) / 1000
        self.output.config(text=output_value)


root = tk.Tk()
app = Application(master=root)
app.mainloop()
</pre>
<p></p>
<h2>連接python</h2>
<p><img alt="" src="/images/tel2023/提問"/><img alt="" height="319" src="/images/tel2023/提問.png" width="467"/></p><h1>RD</h1>
<p><a href="https://play.google.com/store/apps/details?id=com.percent.royaldice">RD</a></p>
<p>4/6開始執行方案</p>
<p>目標做成自動排版RD版面的python程式</p>
<p>預計使用夜神模擬器在電腦執行 </p>
<p>自動判斷並移動</p>
<p>使用<a href="https://41023125.github.io/learning-process/content/adb.html">abd</a>進行操控並獲取畫面</p>
<p>使用<a href="https://41023125.github.io/learning-process/content/OpenCV.html">OpenCV</a>辨識處理</p>
<h2>檢查版面上的骰子</h2>
<p>預設值</p>
<p>addx 195</p>
<p>addy 1010 #訓練場1090</p>
<p>end_x 95</p>
<p>end_y 95</p>
<div>
<div><span>addx</span><span>+(</span><span>9</span><span>+</span><span>95</span><span>)*</span><span>x</span></div>
<div>
<div>
<div><span>addy</span><span>-(</span><span>5</span><span>+</span><span>95</span><span>)*y</span></div>
<div><span></span></div>
<div><span>*將運算更改成多線程</span></div>
</div>
</div>
</div>
<div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pylint: disable=no-member
"""
此注釋用來禁用警告
"""
# 計算全部種類只用一次
import os
import numpy as np
import cv2
import time
from concurrent import futures
# 查看圖片
def timer(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print("程式運行時間：{:.2f}秒".format(end_time - start_time))
        return result
    return wrapper

def look(aimage):
    """
    用來查看圖片
    :aimage: 選擇顯示的圖片

    """
    cv2.imshow("Cropped Image", aimage)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def pag(aimage, start_x, start_y):
    """
    用來裁剪圖片成指定大小
    :aimage: 選擇的圖片
    :start_x:起始X座標
    :start_y:起始y座標
    """
    end_x = 95
    end_y = 95
    return aimage[start_y:start_y+end_y, start_x:start_x+end_x]


def mse(image1, image2):
    """
    比較兩張圖片相似度
    返回百分比
    """
    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)
    err /= float(image1.shape[0] * image1.shape[1])
    if err == 0:
        return 100.0
    else:
        psnr = 10 * np.log10(255**2 / err)
        similarity = (psnr / 50) * 100
        return similarity


def read_file(num):
    """
    返回數字在文本對應的內容
    """
    mapping = {}
    with open("dictionary.txt", 'r', encoding='utf-8') as f:
        # 读取文件内容
        lines = f.readlines()
        for line in lines:
            parts = line.split()
            if len(parts) == 2:
                key = int(parts[0])
                value = parts[1]
                mapping[key] = value
    if num in mapping:
        return mapping[num]
    else:
        print('未在dictionary.txt增新'+str(num)+"對應名稱")
        return


def count_files():
    """
    返回圖庫的檔案數量
    """
    folder_path = "jpg"
    files = os.listdir(folder_path)
    return len(files)


def check(image1):
    """
    比較圖庫所有內容並返回最相近的名稱
    if mes &lt; 30:
            # 儲存圖片
            cv2.imwrite('jpg/'+str((count_files()))+".png", image1)
            with open("ph\\dictionary.txt", 'a', encoding='utf-8') as f:
                count = int(count_files()) - 1
                f.write(str(count) + '    '+read_file(ass)+'\n')
            # print(count)
        # 顯示圖片
        look(image1)
    """
    mes = aass = 0
    for i in range(0, count_files()):
        image2 = cv2.imread("jpg\\" + str(i) + ".png")
        # print("相似度: ", mse(image1, image2), "%")
        if mse(image1, image2) &gt;50:
            mes = mse(image1, image2)
            aass = i
            break
        if mes &lt; mse(image1, image2):
            mes = mse(image1, image2)
            aass = i
    # print(aass)
    aass = read_file(aass)
    # print(mes)
    return aass


# 將陣列展示
def output(my_array):
    """
    將陣列合成字串並返回用於展示
    """
    aoutput = ''
    for _, row in enumerate(my_array):
        for _, value in enumerate(row):
            aoutput += str(value) + ' '
        aoutput += '\n'
    return aoutput

# 檢查全部

_='''單線程棄用
@timer
def check_all(aimage):
    """
    檢查全部的圖片並返回成陣列
    單片檢查
    image1 = pag(image, addx+(9+95)*0, addy-(5+95)*2)
    look(image1)
    """
    addx = 195
    addy = 1090
    # x 9 # y 5 # addx = 195 # addy = 1010
    # 创建一个3x5的空二维數组
    my_array = [[0 for j in range(5)] for i in range(3)]
    for xx in range(5):
        for yy in range(3):
            image1 = pag(aimage, addx+(9+95)*xx, addy-(5+95)*yy)
            my_array[yy][xx] = check(image1)
    my_array = my_array[::-1]
    outpu = output(my_array)
    print(outpu)
    return my_array
'''
@timer
def check_all(aimage):
    """
    檢查全部的圖片並返回成陣列
    單片檢查
    image1 = pag(image, addx+(9+95)*0, addy-(5+95)*2)
    look(image1)
    """
    addx = 195
    addy = 1090
    # x 9 # y 5 # addx = 195 # addy = 1010
    # 创建一个3x5的空二维數组
    my_array = [[0 for j in range(5)] for i in range(3)]
    futures_list = []
    with futures.ThreadPoolExecutor() as executor:
        for xx in range(5):
            for yy in range(3):
                image1 = pag(aimage, addx+(9+95)*xx, addy-(5+95)*yy)
                future = executor.submit(check, image1)
                futures_list.append((future, xx, yy))
        for f, xx, yy in sorted(futures_list, key=lambda x: (x[1], x[2])):
            my_array[yy][xx] = f.result()
    my_array = my_array[::-1]
    outpu = output(my_array)
    print(outpu)
    return my_array


# 測試
'''
JPG1 = "screenshot2.png"
image = cv2.imread(JPG1)
ass = check_all(image)
#print(ass)
'''</pre>
</div>
</div>
<p><strong></strong></p><h2>檢查造骰按鈕狀態</h2>
<p>預設值</p>
<p>addx 195</p>
<p>addy 1010</p>
<p>end_x 95</p>
<p>end_y 20</p>
<div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pylint: disable=no-member
"""
此注釋用來禁用警告
"""
# 檢查造骰按鈕狀態
import numpy as np
import cv2


def pushbutton(aimage):
    """
    檢查按鈕狀態
    """
    addx = 195
    addy = 1090
    aimage1 = pag(aimage, addx+(9+95)*2, addy-(5+95)*-2)
    aimage1 = check(aimage1)
    return aimage1


def pag(aimage, start_x, start_y):
    """
    裁剪圖片
    """
    end_x = 95
    end_y = 20
    return aimage[start_y:start_y+end_y, start_x:start_x+end_x]


def mse(image1, image2):
    """
    比對兩張圖片相似度
    """
    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)
    err /= float(image1.shape[0] * image1.shape[1])
    if err == 0:
        return 100.0
    else:
        psnr = 10 * np.log10(255**2 / err)
        similarity = (psnr / 50) * 100
        return similarity


def check(image1):
    """
    返回對應狀態
    """
    mes = ass = 0
    for i in range(1, 4):
        if i == 1:
            x = "open"
        elif i == 2:
            x = "closure"
        else:
            x = "error"
        image2 = cv2.imread("ph\\summon\\" + x + ".png")
        # print("相似度: ", mse(image1, image2), "%")
        if mes &lt; mse(image1, image2):
            mes = mse(image1, image2)
            ass = x
    _ = '''
    #檢查圖片
    from database import look
    look(image1)'''

    return (ass)


# 測試
JPG1 = "ph//screenshot1.png"
image = cv2.imread(JPG1)
print(pushbutton(image))
</pre>
</div>
</div>
<h2>測試框選範圍</h2>
<div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pylint: disable=no-member
"""
此注釋用來禁用警告
"""
# 測試圖片
import cv2
from database import look


def pag(aimage):
    """"
    裁剪圖片
    """
    addx = 195
    addy = 1090
    start_x = addx+(9+95)*0
    start_y = addy-(5+95)*2
    end_x = (9+95)*4+95
    end_y = 95+(5+95)*2
    return aimage[start_y:start_y+end_y, start_x:start_x+end_x]


# 測試
# 用實戰要改成1010
# 訓練場1090

JPG1 = "ph//screenshot1.png"
image = cv2.imread(JPG1)
look(pag(image))
</pre>
</div>
</div>
<h2>辨識改成多線程</h2>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from concurrent import futures
import cv2
from database import check,pag,output
from main import timer



@timer
def check_all(aimage):
    """
    檢查全部的圖片並返回成陣列
    單片檢查
    image1 = pag(image, addx+(9+95)*0, addy-(5+95)*2)
    look(image1)
    """
    addx = 195
    addy = 1090
    # x 9 # y 5 # addx = 195 # addy = 1010
    # 创建一个3x5的空二维數组
    my_array = [[0 for j in range(5)] for i in range(3)]
    futures_list = []
    with futures.ThreadPoolExecutor() as executor:
        for xx in range(5):
            for yy in range(3):
                image1 = pag(aimage, addx+(9+95)*xx, addy-(5+95)*yy)
                future = executor.submit(check, image1)
                futures_list.append((future, xx, yy))
        for f, xx, yy in sorted(futures_list, key=lambda x: (x[1], x[2])):
            my_array[yy][xx] = f.result()
    my_array = my_array[::-1]
    outpu = output(my_array)
    print(outpu)
    return my_array
JPG1 = "screenshot1.png"
image = cv2.imread(JPG1)
ass = check_all(image)
''''''</pre>
</div>
<p>速度差距</p>
<p><img alt="" height="196" src="/images/rd/多線程.png" width="266"/></p>
<h2>svm</h2>
<p>速度過慢</p>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import cv2
from sklearn import svm

# 讀取圖像數據集和答案
data = []
labels = []
'''
with open("C:/initpython/ph/dictionary.txt", "r", encoding="utf-8") as f:
    for i, line in enumerate(f):
        values = line.strip().split()
        if len(values) != 2:
            print(f"Error: line {i+1} contains {len(values)} values.")
'''
with open("C:/initpython/ph/dictionary.txt", "r", encoding="utf-8") as f:
    for line in f:
        filename, label = line.strip().split()
        print(filename)
        img = cv2.imread(f"C:/initpython/ph/jpg/{filename}.png", 0)  # 讀取灰度圖像
        img = cv2.resize(img, (95, 95))  # 調整圖像大小
        data.append(img.flatten())  # 將圖像數據展平為一維數組
        labels.append(label)  # 將答案添加到標籤列表中

# 創建SVM模型
clf = svm.SVC(kernel='linear')

# 訓練模型
clf.fit(data, labels)

# 讀取要預測的圖像
img = cv2.imread("C:/initpython/ph/jpg/1.png", 0)  # 讀取灰度圖像
img = cv2.resize(img, (95, 95))  # 調整圖像大小
data = img.flatten()  # 將圖像數據展平為一維數組

# 預測圖像
prediction = clf.predict([data])</pre>
</div>
<h2>LeNet-5</h2>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import cv2
import numpy as np
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# 設置GPU加速
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    try:
        tf.config.experimental.set_virtual_device_configuration(
            gpus[0],
            [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=1024)]
        )
    except RuntimeError as e:
        print(e)



def create_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(95, 95, 1)))
    model.add(MaxPooling2D((2, 2)))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Conv2D(128, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(31, activation='softmax'))  # 將輸出層改為31個神經元
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model


# 訓練模型
def train_model():
    data = []
    labels = []
    label_map = {}
    with open("label_map.txt", "r", encoding="utf-8") as f:  
        for line in f:
            label, value = line.strip().split(":")
            label_map[label] = int(value)
    with open("C:/initpython/ph/dictionary.txt", "r", encoding="utf-8") as f:
        for line in f:
            filename, label = line.strip().split()
            img = cv2.imread(f"C:/initpython/ph/jpg/{filename}.png", 0)  # 讀取灰度圖像
            img = cv2.resize(img, (95, 95))  # 調整圖像大小
            data.append(img.reshape((95, 95, 1)))  # 將圖像數據轉換為3D數組
            if label in label_map:
                labels.append(label_map[label])  # 將答案添加到標籤列表中
            else:
                print(f"Invalid label: {label}. Skipping this data.")

    data = np.array(data)
    labels = np.array(labels)

    model = create_model()
    model.fit(data, labels, epochs=10, batch_size=32)

    return model

# 預測圖像
def predict_image(filename1, model):
    img = cv2.imread(filename1, 0)  # 讀取灰度圖像
    img = cv2.resize(img, (95, 95))  # 調整圖像大小
    data = img.reshape((1, 95, 95, 1))  # 將圖像數據轉換為4D數組

    prediction = model.predict(data)

    return np.argmax(prediction)

# 訓練模型
model = train_model()

# 預測圖像
result = predict_image("C:/initpython/ph/jpg/2.png", model)
print(f"This image belongs to class {result}.")</pre>
</div><h1>other</h1>
<p>放置其他零散物品</p>
<h2>建立倉儲</h2>
<p>進入github選擇new repository.png</p>
<p><img alt="" height="167" src="/images/建立倉儲/new repository.png" width="278"/></p>
<p>填寫要建立的倉儲名稱</p>
<p>並勾選<span>Add a README file後</span></p>
<p>點選create repository進行建立</p>
<p><img alt="" height="260" src="/images/建立倉儲/name.png" width="290"/></p>
<p></p>
<p>進入建立的倉儲</p>
<p>並點擊code選擇HTTPS or SSH複製連結</p>
<p><img alt="" height="297" src="/images/建立倉儲/code.png" width="308"/></p>
<p>開啟cmd</p>
<p>輸入git clone (複製的網址)</p>
<p>(需先安裝好<a href="https://git-scm.com/">git</a>)</p>
<p>倉儲的內容便會下載下來</p>
<h2>設定Personal access tokens(碼牌)</h2>
<p>打開github帳號點選右上頭像並點選Settings<br/>點選Developer settings<br/>點選Personal access tokens<br/>點選<a href="https://github.com/settings/tokens/new">Generate new token</a><br/>Note (任意)<br/>打勾repo(第一個)<br/>點選最下面的Generate token<br/>複製產生出來的token<br/>打開可攜系統<br/>打開要設Personal access tokens的資料夾<br/>點開.git(要開隱藏項目才看的到)<br/>將裡面的congif拉到SciTE(球球)<br/>將複製的字串貼在github.com的前面再加上@並存檔(CTRL+S)<br/>這樣Personal access tokens就設定完成</p>
<h2>可攜</h2>
<p><a href="https://drive.google.com/file/d/1KlC7rREf4laOPVHQsBzcuEokXiFBW9c7/view?usp=share_link">可攜模板.zip</a></p>
<h2>key.py</h2>
<p><a href="/downloads/ket.py/key.py">key.py</a></p>
<p><a href="/downloads/ket.py/key.bat">key.bat</a></p>
<p>將上方檔案放入倉儲內部</p>
<p>並將碼牌放入特定txt檔後</p>
<p>將txt位置放入key.py裡面</p>
<p>需要時只需要輸入key便可以快速輸入碼牌</p>
<p><img alt="" height="47" src="/images/key.py/key.png" width="422"/></p>
<p></p>
<h1>question</h1>
<p>所遇到的問題與解決方法</p>
<p><br/>上傳檔案太大<img alt="" height="186" src="/images/遇到問題/檔案太大.png" width="1315"/></p>
<h2>上傳檔案太大</h2>
<p><img alt="" height="79" src="/images/遇到問題/檔案太大.png" width="559"/></p>
<p>取消commit</p>
<p>刪除過大的問題的文件</p>
<p>改用雲端硬碟等方式</p>
<p>重新commit</p>
<h2>取消commit</h2>
<p><span><a href="https://www.php.cn/tool/git/507281.html#:~:text=%E5%8F%96%E6%B6%88%20commit%20%E6%93%8D%E4%BD%9C%20%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E5%B7%B2%E7%BB%8F%E6%89%A7%E8%A1%8C%E4%BA%86%20commit%20%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%BD%86%E5%90%8E%E6%9D%A5%E5%8F%91%E7%8E%B0%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E6%9C%89%E9%94%99%E8%AF%AF%E3%80%81%E6%88%96%E8%80%85%E6%8F%90%E4%BA%A4%E7%9A%84%E5%86%85%E5%AE%B9%E6%9C%89%E8%AF%AF%EF%BC%8C%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E4%BF%AE%E6%94%B9%E4%B9%8B%E5%90%8E%E5%86%8D%E6%AC%A1%E6%8F%90%E4%BA%A4%EF%BC%8C%E8%BF%99%E6%97%B6%E6%88%91%E4%BB%AC%E5%B0%B1%E9%9C%80%E8%A6%81%E5%8F%96%E6%B6%88%E4%B8%8A%E4%B8%80%E6%AC%A1%20commit%20%E6%93%8D%E4%BD%9C%E3%80%82,commit%20%E6%93%8D%E4%BD%9C%E4%B8%80%E8%88%AC%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%9A%E4%BD%BF%E7%94%A8%20git%20revert%20%E5%91%BD%E4%BB%A4%E6%88%96%E4%BD%BF%E7%94%A8%20git%20reset%20%E5%91%BD%E4%BB%A4%E3%80%82">git中如何取消 commit 操作</a></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git reset --soft HEAD^</pre>
<p><br/><br/></p>
<p><span>這個命令將撤銷最後一個提交，但保留更改。如果您需要撤銷更多的提交，可以使用</span>HEAD~n</p>
<p><code class="inline-flex max-w-full overflow-hidden rounded-sm cursor-pointer"></code><span>其中</span>n<code class="inline-flex max-w-full overflow-hidden rounded-sm cursor-pointer"></code><span>是要撤銷的提交數量。例如，如果您要撤銷最後兩個提交，可以使用以下命令：</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git reset --soft HEAD~2</pre>
<h2>恢復之前版本</h2>
<p><a href="https://blog.csdn.net/yxlshk/article/details/79944535">Git恢复之前版本的两种方法reset、revert（图文详解）</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git reset --hard 目標版本號</pre>
<p><br/><br/></p><h2>強制push</h2>
<p><a href="https://www.delftstack.com/zh-tw/howto/git/git-push-force/">Git 推送強制更改</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git push origin main --force</pre>
<pre class="language-git" tabindex="0"><br/><br/></pre>