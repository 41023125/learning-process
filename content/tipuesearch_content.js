var tipuesearch = {"pages": [{'title': 'About', 'text': '這裡將放置學習python的所有過程 \n 以便將來回憶與查詢 \n 網站網址: https://41023125.github.io/learning-process/ \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'web page', 'text': '這裡放置 所學編寫網頁之知識 \n \n', 'tags': '', 'url': 'web page.html'}, {'title': '模板', 'text': '所使用模板 \n cmsimde.zip \n', 'tags': '', 'url': '模板.html'}, {'title': 'OpenCV', 'text': '使用python進行圖片處理 \n', 'tags': '', 'url': 'OpenCV.html'}, {'title': '處理與比較', 'text': '\n \n import cv2\nimport numpy as np\n\njpg1 = r"C:\\initpython\\ph\\Screenshot_20230406-192510.jpg"\nimage = cv2.imread(jpg1)\n\n\n# 裁剪\ndef pag(image, start_x, start_y):\n    end_x = 95\n    end_y = 95\n    return image[start_y:start_y+end_y, start_x:start_x+end_x]\n\n\n# 比較\ndef mse(image1, image2):\n    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)\n    err /= float(image1.shape[0] * image1.shape[1])\n    if err == 0:\n        return 100.0\n    else:\n        psnr = 10 * np.log10(255**2 / err)\n        similarity = (psnr / 50) * 100\n        return similarity\n\n\nimage1 = pag(image, 195, 1090)\nimage2 = cv2.imread(r"C:\\initpython\\ph\\jpg\\phcropped_image.png")\n\n\n# 顯示圖片\n\'\'\'\ncv2.imshow("Cropped Image", image2)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\'\'\'\n\n# 儲存\n# cv2.imwrite("phcropped_image.png", image1)\nprint("相似度: ", mse(image1, image2))\n \n \n \n', 'tags': '', 'url': '處理與比較.html'}, {'title': '辨識初步程式架構', 'text': 'import os\nimport cv2\nimport numpy as np\n\njpg1 = r"C:\\Users\\alin\\Nox_share\\ImageShare\\Screenshots\\Screenshot_20230406-230719.png"\nimage = cv2.imread(jpg1)\n\n\n# 裁剪\ndef pag(image, start_x, start_y):\n    end_x = 95\n    end_y = 95\n    return image[start_y:start_y+end_y, start_x:start_x+end_x]\n\n\n# 比較\ndef mse(image1, image2):\n    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)\n    err /= float(image1.shape[0] * image1.shape[1])\n    if err == 0:\n        return 100.0\n    else:\n        psnr = 10 * np.log10(255**2 / err)\n        similarity = (psnr / 50) * 100\n        return similarity\n\n\n# 查詢類別\ndef read_file(num):\n    mapping = {}\n    with open("ph\\\\dictionary.txt", \'r\', encoding=\'utf-8\') as f:\n        # 读取文件内容\n        lines = f.readlines()\n        for line in lines:\n            parts = line.split()\n            if len(parts) == 2:\n                key = int(parts[0])\n                value = parts[1]\n                mapping[key] = value\n    if num in mapping:\n        print(mapping[num])\n    else:\n        print(\'設置出現錯誤\')\n\n\n# 檢查圖庫數量\ndef count_files():\n    folder_path = "ph\\\\jpg"\n    files = os.listdir(folder_path)\n    return len(files)\n\n\nimage1 = pag(image, 195, 1090)\n# image2 = cv2.imread(r"C:\\initpython\\ph\\jpg\\5.png")\n\n\n# 顯示圖片\n\'\'\'\ncv2.imshow("Cropped Image", image1)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\'\'\'\n\n# 儲存\n# cv2.imwrite("phcropped_image.png", image1)\n\nmes = 0\nass = 0\nfor i in range(1, count_files()+1):\n    image2 = cv2.imread("ph\\\\jpg\\\\" + str(i) + ".png")\n    print("相似度: ", mse(image1, image2), "%")\n    if mes < mse(image1, image2):\n        mes = mse(image1, image2)\n        ass = i\n    if mes < 10:\n        ass = 999\nread_file(ass)\ncv2.imshow("Cropped Image", image1)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n \n', 'tags': '', 'url': '辨識初步程式架構.html'}, {'title': 'adb', 'text': '\n 學習利用python控制手機與模擬器 \n 如何在 WIN10 安裝 Android ADB工具 \n 如何讓 NOX 夜神模擬器支援 ADB \n Android adb 基本用法教學 \n 【新手指导】夜神安卓模拟器adb命令详解_夜神安卓模拟器新手帮助页 (yeshen.com) \n 可以使用 \n adb shell pm list packages | findstr dice\n \n 指令來查看當前顯示的應用程式的相關資訊，其中 mCurrentFocus 顯示目前的視窗和活動的應用程式包名和類名，mFocusedApp 顯示當前焦點的應用程式包名和進程 ID。可以在模擬器或設備上執行此指令，以獲得目標應用程式的包名和主活動。 \n 假設輸出了package:com.percent.royaldice \n 可以使用 \n adb shell monkey -p com.percent.royaldice -c android.intent.category.LAUNCHER 1 \n \n 打開程式 \n 使用 \n adb shell am force-stop com.percent.royaldice \n \n 關閉程式 \n \n', 'tags': '', 'url': 'adb.html'}, {'title': '列出設備上的應用程式', 'text': "from ppadb.client import Client\n \n# 建立 ADB 連線\nadb = Client(host='127.0.0.1', port=5037)\ndevice = adb.device('127.0.0.1:62001')\n \n# 取得所有已安裝應用程式列表\nresult = device.shell('pm list packages')\npackages = [line.strip()[8:] for line in result.split('\\n') if line.strip()]\n \n# 列出所有應用程式名稱\nfor package in packages:\n    print(package) \n", 'tags': '', 'url': '列出設備上的應用程式.html'}, {'title': '測試端口是否正常連接', 'text': 'import socket\n\n# 設置主機地址和端口號\nhost = \'127.0.0.1\'\nport = 62001\n\n# 創建套接字對象\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# 嘗試連接主機和端口號\nresult = sock.connect_ex((host, port))\n\n# 檢查連接結果\nif result == 0:\nprint("端口連接成功！")\nelse:\nprint("端口連接失敗。")\n\n# 關閉套接字對象\nsock.close() \n \n', 'tags': '', 'url': '測試端口是否正常連接.html'}, {'title': '取得目前應用程式的包名稱和主活動', 'text': 'from ppadb.client import Client\n\n# 建立 ADB 連線\nadb = Client(host=\'127.0.0.1\', port=5037)\ndevice = adb.device(\'127.0.0.1:62001\')\n\n# 查詢目前應用程式的包名稱和主活動\noutput = device.shell(\'dumpsys window windows | grep -E "mCurrentFocus"\')\npackage_activity = output.split(\' \')[-1].split(\'/\')\npackage_name = package_activity[0]\nactivity_name = package_activity[1].strip()\n\n# 開啟應用程式\n#device.shell(f"am start -n {package_name}/{activity_name}") \n 輸出結果範例: \n com.percent.royaldice com.google.firebase.MessagingUnityPlayerActivity} \n 分別帶入後變成 \n \n package_name  =  \'com.percent.royaldice\' \n activity_name  =  \'com.google.firebase.MessagingUnityPlayerActivity\' \n 便能利用\n \n device .shell( f "am start -n  { package_name } / { activity_name } " ) \n 開啟想要開啟的程式 \n \n \n \n \n', 'tags': '', 'url': '取得目前應用程式的包名稱和主活動.html'}, {'title': '截圖', 'text': 'import subprocess\n\nsubprocess.run("adb shell screencap -p /sdcard/screenshot.png")\nsubprocess.run("adb pull /sdcard/screenshot.png .")\nsubprocess.run("adb shell rm /sdcard/screenshot.png") \n \n', 'tags': '', 'url': '截圖.html'}, {'title': '點擊', 'text': "\n \n import subprocess\n\n\ndef click(x, y):\n\xa0 \xa0 subprocess.run(['adb', 'shell', f'input tap {x} {y}'])\n\n\nclick(500, 500) \xa0# 點擊座標 (500, 500)\n \n \n \n", 'tags': '', 'url': '點擊.html'}, {'title': 'tel2023', 'text': 'labview程式: \n https://drive.google.com/file/d/1jeEyfaqDKvxz0uE1AdAojRzPLV_Hj38D/view?usp=share_link/ \n', 'tags': '', 'url': 'tel2023.html'}, {'title': '直線校正', 'text': '直線校正.zip \n \n 使用python編寫 \n 下方為程式碼 \n import tkinter as tk\n\n\nclass Application(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.master = master\n        self.pack()\n        self.create_widgets()\n\n    def create_widgets(self):\n        self.input2_label = tk.Label(self, text="實際距離:")\n        self.input2_label.pack()\n        self.input2 = tk.Entry(self)\n        self.input2.pack()\n\n        self.input3_label = tk.Label(self, text="當前輪徑:")\n        self.input3_label.pack()\n        self.input3 = tk.Entry(self)\n        self.input3.pack()\n\n        self.submit_button = tk.Button(\n            self, text="計算", command=self.show_output)\n        self.submit_button.pack()\n\n        self.output_label = tk.Label(self, text="輪徑:")\n        self.output_label.pack()\n        self.output = tk.Label(self, text="")\n        self.output.pack()\n\n        self.quit_button = tk.Button(\n            self, text="Quit", command=self.master.quit)\n        self.quit_button.pack()\n\n    def show_output(self):\n        input2_value = self.input2.get()\n        input3_value = self.input3.get()\n\n        # 在這裡加上你的處理邏輯，將結果顯示在output的Label中\n        input2_value = float(self.input2.get())\n        input3_value = float(self.input3.get())\n        output_value = (input3_value * input2_value) / 1000\n        self.output.config(text=output_value)\n\n\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()\n \n \n', 'tags': '', 'url': '直線校正.html'}, {'title': '連接python', 'text': '', 'tags': '', 'url': '連接python.html'}, {'title': 'RD', 'text': 'RD \n 4/6開始執行方案 \n 目標做成自動排版RD版面的python程式 \n 預計使用夜神模擬器在電腦執行\xa0 \n 自動判斷並移動 \n 使用 abd 進行操控並獲取畫面 \n 使用 OpenCV 辨識處理 \n', 'tags': '', 'url': 'RD.html'}, {'title': '檢查版面上的骰子', 'text': '預設值 \n addx 195 \n addy 1010 #訓練場1090 \n end_x 95 \n end_y 95 \n \n addx +( 9 + 95 )* x \n \n \n addy -( 5 + 95 )*y \n \n *將運算更改成多線程 \n \n \n \n \n \n # pylint: disable=no-member\n"""\n此注釋用來禁用警告\n"""\n# 計算全部種類只用一次\nimport os\nimport numpy as np\nimport cv2\nimport time\nfrom concurrent import futures\n# 查看圖片\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print("程式運行時間：{:.2f}秒".format(end_time - start_time))\n        return result\n    return wrapper\n\ndef look(aimage):\n    """\n    用來查看圖片\n    :aimage: 選擇顯示的圖片\n\n    """\n    cv2.imshow("Cropped Image", aimage)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\n\ndef pag(aimage, start_x, start_y):\n    """\n    用來裁剪圖片成指定大小\n    :aimage: 選擇的圖片\n    :start_x:起始X座標\n    :start_y:起始y座標\n    """\n    end_x = 95\n    end_y = 95\n    return aimage[start_y:start_y+end_y, start_x:start_x+end_x]\n\n\ndef mse(image1, image2):\n    """\n    比較兩張圖片相似度\n    返回百分比\n    """\n    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)\n    err /= float(image1.shape[0] * image1.shape[1])\n    if err == 0:\n        return 100.0\n    else:\n        psnr = 10 * np.log10(255**2 / err)\n        similarity = (psnr / 50) * 100\n        return similarity\n\n\ndef read_file(num):\n    """\n    返回數字在文本對應的內容\n    """\n    mapping = {}\n    with open("dictionary.txt", \'r\', encoding=\'utf-8\') as f:\n        # 读取文件内容\n        lines = f.readlines()\n        for line in lines:\n            parts = line.split()\n            if len(parts) == 2:\n                key = int(parts[0])\n                value = parts[1]\n                mapping[key] = value\n    if num in mapping:\n        return mapping[num]\n    else:\n        print(\'未在dictionary.txt增新\'+str(num)+"對應名稱")\n        return\n\n\ndef count_files():\n    """\n    返回圖庫的檔案數量\n    """\n    folder_path = "jpg"\n    files = os.listdir(folder_path)\n    return len(files)\n\n\ndef check(image1):\n    """\n    比較圖庫所有內容並返回最相近的名稱\n    if mes < 30:\n            # 儲存圖片\n            cv2.imwrite(\'jpg/\'+str((count_files()))+".png", image1)\n            with open("ph\\\\dictionary.txt", \'a\', encoding=\'utf-8\') as f:\n                count = int(count_files()) - 1\n                f.write(str(count) + \'    \'+read_file(ass)+\'\\n\')\n            # print(count)\n        # 顯示圖片\n        look(image1)\n    """\n    mes = aass = 0\n    for i in range(0, count_files()):\n        image2 = cv2.imread("jpg\\\\" + str(i) + ".png")\n        # print("相似度: ", mse(image1, image2), "%")\n        if mse(image1, image2) >50:\n            mes = mse(image1, image2)\n            aass = i\n            break\n        if mes < mse(image1, image2):\n            mes = mse(image1, image2)\n            aass = i\n    # print(aass)\n    aass = read_file(aass)\n    # print(mes)\n    return aass\n\n\n# 將陣列展示\ndef output(my_array):\n    """\n    將陣列合成字串並返回用於展示\n    """\n    aoutput = \'\'\n    for _, row in enumerate(my_array):\n        for _, value in enumerate(row):\n            aoutput += str(value) + \' \'\n        aoutput += \'\\n\'\n    return aoutput\n\n# 檢查全部\n\n_=\'\'\'單線程棄用\n@timer\ndef check_all(aimage):\n    """\n    檢查全部的圖片並返回成陣列\n    單片檢查\n    image1 = pag(image, addx+(9+95)*0, addy-(5+95)*2)\n    look(image1)\n    """\n    addx = 195\n    addy = 1090\n    # x 9 # y 5 # addx = 195 # addy = 1010\n    # 创建一个3x5的空二维數组\n    my_array = [[0 for j in range(5)] for i in range(3)]\n    for xx in range(5):\n        for yy in range(3):\n            image1 = pag(aimage, addx+(9+95)*xx, addy-(5+95)*yy)\n            my_array[yy][xx] = check(image1)\n    my_array = my_array[::-1]\n    outpu = output(my_array)\n    print(outpu)\n    return my_array\n\'\'\'\n@timer\ndef check_all(aimage):\n    """\n    檢查全部的圖片並返回成陣列\n    單片檢查\n    image1 = pag(image, addx+(9+95)*0, addy-(5+95)*2)\n    look(image1)\n    """\n    addx = 195\n    addy = 1090\n    # x 9 # y 5 # addx = 195 # addy = 1010\n    # 创建一个3x5的空二维數组\n    my_array = [[0 for j in range(5)] for i in range(3)]\n    futures_list = []\n    with futures.ThreadPoolExecutor() as executor:\n        for xx in range(5):\n            for yy in range(3):\n                image1 = pag(aimage, addx+(9+95)*xx, addy-(5+95)*yy)\n                future = executor.submit(check, image1)\n                futures_list.append((future, xx, yy))\n        for f, xx, yy in sorted(futures_list, key=lambda x: (x[1], x[2])):\n            my_array[yy][xx] = f.result()\n    my_array = my_array[::-1]\n    outpu = output(my_array)\n    print(outpu)\n    return my_array\n\n\n# 測試\n\'\'\'\nJPG1 = "screenshot2.png"\nimage = cv2.imread(JPG1)\nass = check_all(image)\n#print(ass)\n\'\'\' \n \n \n', 'tags': '', 'url': '檢查版面上的骰子.html'}, {'title': '檢查造骰按鈕狀態', 'text': '預設值 \n addx 195 \n addy 1010 \n end_x 95 \n end_y\xa020 \n \n \n # pylint: disable=no-member\n"""\n此注釋用來禁用警告\n"""\n# 檢查造骰按鈕狀態\nimport numpy as np\nimport cv2\n\n\ndef pushbutton(aimage):\n    """\n    檢查按鈕狀態\n    """\n    addx = 195\n    addy = 1090\n    aimage1 = pag(aimage, addx+(9+95)*2, addy-(5+95)*-2)\n    aimage1 = check(aimage1)\n    return aimage1\n\n\ndef pag(aimage, start_x, start_y):\n    """\n    裁剪圖片\n    """\n    end_x = 95\n    end_y = 20\n    return aimage[start_y:start_y+end_y, start_x:start_x+end_x]\n\n\ndef mse(image1, image2):\n    """\n    比對兩張圖片相似度\n    """\n    err = np.sum((image1.astype("float") - image2.astype("float")) ** 2)\n    err /= float(image1.shape[0] * image1.shape[1])\n    if err == 0:\n        return 100.0\n    else:\n        psnr = 10 * np.log10(255**2 / err)\n        similarity = (psnr / 50) * 100\n        return similarity\n\n\ndef check(image1):\n    """\n    返回對應狀態\n    """\n    mes = ass = 0\n    for i in range(1, 4):\n        if i == 1:\n            x = "open"\n        elif i == 2:\n            x = "closure"\n        else:\n            x = "error"\n        image2 = cv2.imread("ph\\\\summon\\\\" + x + ".png")\n        # print("相似度: ", mse(image1, image2), "%")\n        if mes < mse(image1, image2):\n            mes = mse(image1, image2)\n            ass = x\n    _ = \'\'\'\n    #檢查圖片\n    from database import look\n    look(image1)\'\'\'\n\n    return (ass)\n\n\n# 測試\nJPG1 = "ph//screenshot1.png"\nimage = cv2.imread(JPG1)\nprint(pushbutton(image))\n \n \n \n', 'tags': '', 'url': '檢查造骰按鈕狀態.html'}, {'title': '測試框選範圍', 'text': '\n \n # pylint: disable=no-member\n"""\n此注釋用來禁用警告\n"""\n# 測試圖片\nimport cv2\nfrom database import look\n\n\ndef pag(aimage):\n\xa0 \xa0 """"\n\xa0 \xa0 裁剪圖片\n\xa0 \xa0 """\n\xa0 \xa0 addx = 195\n\xa0 \xa0 addy = 1090\n\xa0 \xa0 start_x = addx+(9+95)*0\n\xa0 \xa0 start_y = addy-(5+95)*2\n\xa0 \xa0 end_x = (9+95)*4+95\n\xa0 \xa0 end_y = 95+(5+95)*2\n\xa0 \xa0 return aimage[start_y:start_y+end_y, start_x:start_x+end_x]\n\n\n# 測試\n# 用實戰要改成1010\n# 訓練場1090\n\nJPG1 = "ph//screenshot1.png"\nimage = cv2.imread(JPG1)\nlook(pag(image))\n \n \n \n', 'tags': '', 'url': '測試框選範圍.html'}, {'title': '辨識改成多線程', 'text': '\n from concurrent import futures\nimport cv2\nfrom database import check,pag,output\nfrom main import timer\n\n\n\n@timer\ndef check_all(aimage):\n    """\n    檢查全部的圖片並返回成陣列\n    單片檢查\n    image1 = pag(image, addx+(9+95)*0, addy-(5+95)*2)\n    look(image1)\n    """\n    addx = 195\n    addy = 1090\n    # x 9 # y 5 # addx = 195 # addy = 1010\n    # 创建一个3x5的空二维數组\n    my_array = [[0 for j in range(5)] for i in range(3)]\n    futures_list = []\n    with futures.ThreadPoolExecutor() as executor:\n        for xx in range(5):\n            for yy in range(3):\n                image1 = pag(aimage, addx+(9+95)*xx, addy-(5+95)*yy)\n                future = executor.submit(check, image1)\n                futures_list.append((future, xx, yy))\n        for f, xx, yy in sorted(futures_list, key=lambda x: (x[1], x[2])):\n            my_array[yy][xx] = f.result()\n    my_array = my_array[::-1]\n    outpu = output(my_array)\n    print(outpu)\n    return my_array\nJPG1 = "screenshot1.png"\nimage = cv2.imread(JPG1)\nass = check_all(image)\n\'\'\'\'\'\' \n \n 速度差距 \n \n', 'tags': '', 'url': '辨識改成多線程.html'}, {'title': 'svm', 'text': '速度過慢 \n \n import cv2\nfrom sklearn import svm\n\n# 讀取圖像數據集和答案\ndata = []\nlabels = []\n\'\'\'\nwith open("C:/initpython/ph/dictionary.txt", "r", encoding="utf-8") as f:\n\xa0 \xa0 for i, line in enumerate(f):\n\xa0 \xa0 \xa0 \xa0 values = line.strip().split()\n\xa0 \xa0 \xa0 \xa0 if len(values) != 2:\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 print(f"Error: line {i+1} contains {len(values)} values.")\n\'\'\'\nwith open("C:/initpython/ph/dictionary.txt", "r", encoding="utf-8") as f:\n\xa0 \xa0 for line in f:\n\xa0 \xa0 \xa0 \xa0 filename, label = line.strip().split()\n\xa0 \xa0 \xa0 \xa0 print(filename)\n\xa0 \xa0 \xa0 \xa0 img = cv2.imread(f"C:/initpython/ph/jpg/{filename}.png", 0) \xa0# 讀取灰度圖像\n\xa0 \xa0 \xa0 \xa0 img = cv2.resize(img, (95, 95)) \xa0# 調整圖像大小\n\xa0 \xa0 \xa0 \xa0 data.append(img.flatten()) \xa0# 將圖像數據展平為一維數組\n\xa0 \xa0 \xa0 \xa0 labels.append(label) \xa0# 將答案添加到標籤列表中\n\n# 創建SVM模型\nclf = svm.SVC(kernel=\'linear\')\n\n# 訓練模型\nclf.fit(data, labels)\n\n# 讀取要預測的圖像\nimg = cv2.imread("C:/initpython/ph/jpg/1.png", 0) \xa0# 讀取灰度圖像\nimg = cv2.resize(img, (95, 95)) \xa0# 調整圖像大小\ndata = img.flatten() \xa0# 將圖像數據展平為一維數組\n\n# 預測圖像\nprediction = clf.predict([data]) \n \n', 'tags': '', 'url': 'svm.html'}, {'title': 'LeNet-5', 'text': '\n import cv2\nimport numpy as np\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n\n# 設置GPU加速\ngpus = tf.config.experimental.list_physical_devices(\'GPU\')\nif gpus:\n\xa0 \xa0 try:\n\xa0 \xa0 \xa0 \xa0 tf.config.experimental.set_virtual_device_configuration(\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 gpus[0],\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=1024)]\n\xa0 \xa0 \xa0 \xa0 )\n\xa0 \xa0 except RuntimeError as e:\n\xa0 \xa0 \xa0 \xa0 print(e)\n\n\n\ndef create_model():\n\xa0 \xa0 model = Sequential()\n\xa0 \xa0 model.add(Conv2D(32, (3, 3), activation=\'relu\', input_shape=(95, 95, 1)))\n\xa0 \xa0 model.add(MaxPooling2D((2, 2)))\n\xa0 \xa0 model.add(Conv2D(64, (3, 3), activation=\'relu\'))\n\xa0 \xa0 model.add(MaxPooling2D((2, 2)))\n\xa0 \xa0 model.add(Conv2D(128, (3, 3), activation=\'relu\'))\n\xa0 \xa0 model.add(MaxPooling2D((2, 2)))\n\xa0 \xa0 model.add(Flatten())\n\xa0 \xa0 model.add(Dense(128, activation=\'relu\'))\n\xa0 \xa0 model.add(Dense(31, activation=\'softmax\')) \xa0# 將輸出層改為31個神經元\n\xa0 \xa0 model.compile(optimizer=\'adam\', loss=\'sparse_categorical_crossentropy\', metrics=[\'accuracy\'])\n\xa0 \xa0 return model\n\n\n# 訓練模型\ndef train_model():\n\xa0 \xa0 data = []\n\xa0 \xa0 labels = []\n\xa0 \xa0 label_map = {}\n\xa0 \xa0 with open("label_map.txt", "r", encoding="utf-8") as f: \xa0\n\xa0 \xa0 \xa0 \xa0 for line in f:\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 label, value = line.strip().split(":")\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 label_map[label] = int(value)\n\xa0 \xa0 with open("C:/initpython/ph/dictionary.txt", "r", encoding="utf-8") as f:\n\xa0 \xa0 \xa0 \xa0 for line in f:\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 filename, label = line.strip().split()\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 img = cv2.imread(f"C:/initpython/ph/jpg/{filename}.png", 0) \xa0# 讀取灰度圖像\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 img = cv2.resize(img, (95, 95)) \xa0# 調整圖像大小\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 data.append(img.reshape((95, 95, 1))) \xa0# 將圖像數據轉換為3D數組\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 if label in label_map:\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 labels.append(label_map[label]) \xa0# 將答案添加到標籤列表中\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 else:\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 print(f"Invalid label: {label}. Skipping this data.")\n\n\xa0 \xa0 data = np.array(data)\n\xa0 \xa0 labels = np.array(labels)\n\n\xa0 \xa0 model = create_model()\n\xa0 \xa0 model.fit(data, labels, epochs=10, batch_size=32)\n\n\xa0 \xa0 return model\n\n# 預測圖像\ndef predict_image(filename1, model):\n\xa0 \xa0 img = cv2.imread(filename1, 0) \xa0# 讀取灰度圖像\n\xa0 \xa0 img = cv2.resize(img, (95, 95)) \xa0# 調整圖像大小\n\xa0 \xa0 data = img.reshape((1, 95, 95, 1)) \xa0# 將圖像數據轉換為4D數組\n\n\xa0 \xa0 prediction = model.predict(data)\n\n\xa0 \xa0 return np.argmax(prediction)\n\n# 訓練模型\nmodel = train_model()\n\n# 預測圖像\nresult = predict_image("C:/initpython/ph/jpg/2.png", model)\nprint(f"This image belongs to class {result}.") \n \n', 'tags': '', 'url': 'LeNet-5.html'}, {'title': 'Unity', 'text': '\n \n \n \n void   Start (){}//開始時只執行一次 \n \n \n void   Update () {}//重複執行 \n \n \n \n \n Debug.Log(123); //將括號內容顯示在consoleg上面 \n public //公用 \n \n [ SerializeField ] \n rigidbody 剛體 \n collider 碰撞 \n \n \n \n private   void   OnCollisionEnter2D ( Collision2D   other )  \n \xa0 \xa0 { \n \xa0 \xa0 \xa0 \xa0 \n \n \xa0 \xa0 \xa0 \xa0 if ( other . gameObject . tag   ==   "food" ) \n \xa0 \xa0 \xa0 \xa0 { \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  Debug . Log ( "撞到了" ); \n \xa0 \xa0 \xa0 \xa0 } \n \n \n \xa0 \xa0 }//碰撞檢測 \n \n \n \n gameObject 遊戲對象 \n \n \n \n \n', 'tags': '', 'url': 'Unity.html'}, {'title': 'other', 'text': '放置其他零散物品 \n', 'tags': '', 'url': 'other.html'}, {'title': '建立倉儲', 'text': '進入github選擇new repository.png \n \n 填寫要建立的倉儲名稱 \n 並勾選 Add a README file後 \n 點選create repository進行建立 \n \n \n 進入建立的倉儲 \n 並點擊code選擇HTTPS or SSH複製連結 \n \n 開啟cmd \n 輸入git clone (複製的網址) \n (需先安裝好 git ) \n 倉儲的內容便會下載下來 \n', 'tags': '', 'url': '建立倉儲.html'}, {'title': '設定Personal access tokens(碼牌)', 'text': '打開github帳號點選右上頭像並點選Settings 點選Developer settings 點選Personal access tokens 點選 Generate new token Note (任意) 打勾repo(第一個) 點選最下面的Generate token 複製產生出來的token 打開可攜系統 打開要設Personal access tokens的資料夾 點開.git(要開隱藏項目才看的到) 將裡面的congif拉到SciTE(球球) 將複製的字串貼在github.com的前面再加上@並存檔(CTRL+S) 這樣Personal access tokens就設定完成 \n', 'tags': '', 'url': '設定Personal access tokens(碼牌).html'}, {'title': '可攜', 'text': '可攜模板.zip \n', 'tags': '', 'url': '可攜.html'}, {'title': 'key.py', 'text': 'key.py \n key.bat \n 將上方檔案放入倉儲內部 \n 並將碼牌放入特定txt檔後 \n 將txt位置放入key.py裡面 \n 需要時只需要輸入key便可以快速輸入碼牌 \n \n \n', 'tags': '', 'url': 'key.py.html'}, {'title': 'CMD', 'text': '遠端連線 mstsc 檢查sfc /scannow  chkdsk  chkdsk /r 外部curl -L ip.tool.lu ping 127.0.0.1 -t 性能監測器perfmon.msc 使用者帳戶net user', 'tags': '', 'url': 'CMD.html'}, {'title': 'question', 'text': '所遇到的問題與解決方法 \n 上傳檔案太大 \n', 'tags': '', 'url': 'question.html'}, {'title': '上傳檔案太大', 'text': '\n 取消commit \n 刪除過大的問題的文件 \n 改用雲端硬碟等方式 \n 重新commit \n', 'tags': '', 'url': '上傳檔案太大.html'}, {'title': '取消commit', 'text': 'git中如何取消 commit 操作 \n git reset --soft HEAD^ \n \n 這個命令將撤銷最後一個提交，但保留更改。如果您需要撤銷更多的提交，可以使用 HEAD~n \n 其中 n 是要撤銷的提交數量。例如，如果您要撤銷最後兩個提交，可以使用以下命令： \n git reset --soft HEAD~2 \n', 'tags': '', 'url': '取消commit.html'}, {'title': '恢復之前版本', 'text': 'Git恢复之前版本的两种方法reset、revert（图文详解） \n git reset --hard 目標版本號 \n', 'tags': '', 'url': '恢復之前版本.html'}, {'title': '強制push', 'text': 'Git 推送強制更改 \n git push origin main --force \n', 'tags': '', 'url': '強制push.html'}]};